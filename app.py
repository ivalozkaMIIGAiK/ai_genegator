import base64
import streamlit as st
from utils.fusionbrain_api import FusionBrainAPI
import psycopg2

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    page_icon="üé®",
    layout="wide"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
def get_db_connection():
    return psycopg2.connect(
        dbname=st.secrets["DB_NAME"],
        user=st.secrets["DB_USER"],
        password=st.secrets["DB_PASSWORD"],
        host=st.secrets["DB_HOST"],
        port=st.secrets["DB_PORT"]
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_data_from_db():
    data = {
        "styles": [],
        "genres": [],
        "lighting": [],
        "techniques": [],
        "colors": []
    }
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ç–∏–ª–µ–π (—Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è)
        cursor.execute("SELECT name, short_description, medium_description, long_description FROM styles")
        data["styles"] = cursor.fetchall()
        
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –∂–∞–Ω—Ä–æ–≤
        cursor.execute("SELECT name, description FROM genres")
        data["genres"] = cursor.fetchall()
        
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –æ—Å–≤–µ—â–µ–Ω–∏—è
        cursor.execute("SELECT name, description FROM lighting")
        data["lighting"] = cursor.fetchall()
        
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Ö–Ω–∏–∫
        cursor.execute("SELECT name, description FROM techniques")
        data["techniques"] = cursor.fetchall()
        
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è —Ü–≤–µ—Ç–æ–≤
        cursor.execute("SELECT name, description FROM colors")
        data["colors"] = cursor.fetchall()
        
        cursor.close()
        conn.close()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    return data

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
def init_session_state():
    if 'db_data' not in st.session_state:
        st.session_state.db_data = get_data_from_db()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    categories = ["style", "genre", "lighting", "technique", "color"]
    for category in categories:
        key = f"selected_{category}"
        if key not in st.session_state:
            st.session_state[key] = None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
    if 'detail_level' not in st.session_state:
        st.session_state.detail_level = "—Å—Ä–µ–¥–Ω–∏–π"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞
    if 'generated_prompt' not in st.session_state:
        st.session_state.generated_prompt = None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if 'image_data' not in st.session_state:
        st.session_state.image_data = None
    if 'generated_image' not in st.session_state:
        st.session_state.generated_image = False

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
categories = ["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–ñ–∞–Ω—Ä", "–û—Å–≤–µ—â–µ–Ω–∏–µ", "–¢–µ—Ö–Ω–∏–∫–∞", "–¶–≤–µ—Ç–∞"]
category_keys = ["style", "genre", "lighting", "technique", "color"]
display_categories = ["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Å—Ç–∏–ª—å)", "–ñ–∞–Ω—Ä", "–û—Å–≤–µ—â–µ–Ω–∏–µ", "–¢–µ—Ö–Ω–∏–∫–∞", "–¶–≤–µ—Ç–∞"]

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é AI")
st.subheader("–°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
init_session_state()

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø—Ä–æ–º—Ç–∞
main_prompt = st.text_area(
    "–û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–µ–≤—É—à–∫–∞ –≤ –ø–ª–∞—Ç—å–µ –∏–∑ —Ü–≤–µ—Ç–æ–≤, ...",
    height=150,
    key="main_prompt"
)

# –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

# –í–∫–ª–∞–¥–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
tabs = st.tabs(display_categories)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
for i, tab in enumerate(tabs):
    with tab:
        category_key = category_keys[i]
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–ª—é—á–∞–º–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
        data_key_map = {
            "style": "styles",
            "genre": "genres",
            "lighting": "lighting",
            "technique": "techniques",
            "color": "colors"
        }
        data_key = data_key_map[category_key]
        data = st.session_state.db_data[data_key]
        
        if data:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫
            options = [item[0] for item in data]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ session_state
            current_selection = st.session_state[f"selected_{category_key}"]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞—Ö
            index = None
            if current_selection and current_selection in options:
                index = options.index(current_selection)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ —Å –æ–ø—Ü–∏–µ–π "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
            radio_options = ["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"] + options
            selected_index = st.radio(
                f"–í—ã–±–µ—Ä–∏—Ç–µ {display_categories[i].lower()}:", 
                radio_options,
                index=0 if current_selection is None else index + 1,
                key=f"radio_{category_key}_{i}"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞
            if selected_index == "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
                st.session_state[f"selected_{category_key}"] = None
            else:
                st.session_state[f"selected_{category_key}"] = selected_index
            
            # –î–ª—è —Å—Ç–∏–ª—è –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            if category_key == "style" and st.session_state.selected_style:
                # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
                style_data = next(item for item in data if item[0] == st.session_state.selected_style)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
                detail_options = ["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π"]
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                current_detail = st.session_state.detail_level.capitalize()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
                try:
                    detail_index = detail_options.index(current_detail)
                except ValueError:
                    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    detail_index = 1
                    st.session_state.detail_level = "—Å—Ä–µ–¥–Ω–∏–π"
                
                # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
                detail_level = st.radio(
                    "–£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∏–ª—è:",
                    detail_options,
                    index=detail_index,
                    key=f"detail_level_{i}"
                )
                st.session_state.detail_level = detail_level.lower()
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
                if detail_level == "–ù–∏–∑–∫–∏–π":
                    description = style_data[1]  # short_description
                elif detail_level == "–°—Ä–µ–¥–Ω–∏–π":
                    description = style_data[2]  # medium_description
                else:
                    description = style_data[3]  # long_description
                
            
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            elif st.session_state[f"selected_{category_key}"]:
                # –ù–∞—Ö–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                description = next(item[1] for item in data if item[0] == st.session_state[f"selected_{category_key}"])
        else:
            st.warning(f"–î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{display_categories[i]}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
@st.cache_resource
def init_fusionbrain_api():
    return FusionBrainAPI(
        url='https://api-key.fusionbrain.ai/',
        api_key=st.secrets["FUSIONBRAIN_API_KEY"],
        secret_key=st.secrets["FUSIONBRAIN_SECRET_KEY"]
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞
def create_prompt(base, db_data):
    base = base.strip().capitalize()
    fragments = []
    
    # –ñ–∞–Ω—Ä (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω)
    if st.session_state.selected_genre:
        genre_desc = next(
            item[1] for item in db_data["genres"] 
            if item[0] == st.session_state.selected_genre
        )
        fragments.append(genre_desc)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ (–æ—Å–Ω–æ–≤–∞)
    fragments.append(base)
    
    # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Å—Ç–∏–ª—å) —Å –Ω—É–∂–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    if st.session_state.selected_style:
        style_data = next(
            item for item in db_data["styles"] 
            if item[0] == st.session_state.selected_style
        )
        
        if st.session_state.detail_level == "–Ω–∏–∑–∫–∏–π":
            fragments.append(style_data[1] + ".")  # short_description
        elif st.session_state.detail_level == "—Å—Ä–µ–¥–Ω–∏–π":
            fragments.append(style_data[2] + ".")  # medium_description
        else:  # –≤—ã—Å–æ–∫–∏–π
            fragments.append(style_data[3] + ".")  # long_description
    
    # –¢–µ—Ö–Ω–∏–∫–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞)
    if st.session_state.selected_technique:
        technique_desc = next(
            item[1] for item in db_data["techniques"] 
            if item[0] == st.session_state.selected_technique
        )
        fragments.append(technique_desc + ".")
    
    # –û—Å–≤–µ—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ)
    if st.session_state.selected_lighting:
        lighting_desc = next(
            item[1] for item in db_data["lighting"] 
            if item[0] == st.session_state.selected_lighting
        )
        fragments.append(lighting_desc)
    
    # –¶–≤–µ—Ç–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã)
    if st.session_state.selected_color:
        color_desc = next(
            item[1] for item in db_data["colors"] 
            if item[0] == st.session_state.selected_color
        )
        fragments.append(color_desc + ".")
    
    return " ".join(fragments)

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞
prompt_container = st.empty()

# –ö–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
col1, col2 = st.columns(2)

with col1:
    # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–∞
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç", type="secondary", use_container_width=True):
        if not main_prompt.strip():
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        else:
            full_prompt = create_prompt(
                base=main_prompt,
                db_data=st.session_state.db_data
            )
            st.session_state.generated_prompt = full_prompt

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º—Ç
if st.session_state.get("generated_prompt"):
    prompt_container.subheader("–§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    prompt_container.info(f'"{st.session_state.generated_prompt}"')

with col2:
    # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type="primary", use_container_width=True):
        if not st.session_state.get("generated_prompt"):
            st.warning("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–º—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç'")
        else:
            full_prompt = st.session_state.generated_prompt
            with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏..."):
                try:
                    api = init_fusionbrain_api()
                    pipeline_id = api.get_pipeline()
                    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã)..."):
                        uuid = api.generate(
                            prompt=full_prompt,
                            pipeline=pipeline_id,
                            images=1,
                            width=1024,
                            height=1024
                        )
                        images_base64 = api.check_generation(
                            request_id=uuid,
                            attempts=30,
                            delay=3
                        )
                    if images_base64:
                        st.session_state.image_data = base64.b64decode(images_base64[0])
                        st.session_state.generated_image = True
                        st.success("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
if st.session_state.get("generated_image") and st.session_state.get("image_data"):
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    st.image(
        st.session_state.image_data, 
        caption="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
        use_container_width=True
    )
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        data=st.session_state.image_data,
        file_name="generated_image.png",
        mime="image/png"
    )
    st.caption(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: '{st.session_state.generated_prompt}'")
